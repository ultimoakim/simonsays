// //Constants
// const COLORS = {
//   '0': 'red',
//   '1': 'blue',
//   '2': 'yellow',
//   '3': 'green'
// }


// //States
// let circle; //to reset the circle back to normal when the game is over
// let round; //to show which round it is
// let correctSequence;//to show if the player guessed the sequence right
// let winner;//to determine if there is a winner. Only 2 values: 1 and -1.


//Cache/DOM
// messageElement //Will change based on whether the player was correct or not. E.G. CORRECT!/INCORRECT!/3 strikes! You LOSE!/You WIN! 
// play/playAgainBtn //Used for if there's a winner or no winner
// redBtn, blueBtn, yellowBtn, greenBtn //will be accessed through the DOM more than once


//Event Listeners
// clicking on divs <-- We'll need one for the buttons.
// clicking on play again/play game button


//Functions
// we need init (obviously) so that when we do play again it'll go back to the start. This function will store all our starting elements and positions. We invoke it at the top here and then define the function.
// we need render for each function that's going to change something. So we'd need render at the end of our renderBoard, renderTitle, and renderButtons (that will appear/disappear depending on the circumstances).
//And then, after our render functions, the subrender functions, as mentioned earlier (renderBoard, renderTitle, renderButtons)
//Probably the most important function here: the event listener's callback function. Inside of this function, it will also run a winner function that will calculate if there's a winner. With EVERY CLICK that happens, just like in connect 4 and in tic tac toe, it should check for a win with EVERY click that it does.
//***A good thing to think about with all of these functions is: What is each function going to do with the state, stored data, and all the cached elements? This is how we can think about it!


//Other important things I will have to consider:
//jQuery...? Well, I'll decide about that...
//I haven't really thought too much about the data structures yet, but it will take some thinking to do. I may need several arrays here. We already used one to define the colors, but we may also need more. One array that contains the DATA that will match the color that we're clicking on, one array that contains what the GAME inputted as a mixup, one array where the player must MATCH the game's inputted array,... and I can't think of other things that could also be in an array. Maybe the number of strikes? But that's it, really. It's tough.
//The other thing to consider about arrays is that we'll have to add to the array after every sequence is correctly guessed by the player.
//The colors will probably be made to look darker while it's NOT being clicked on/lit up. 
//Asynchronous functions will also be very important here. I could add some extra features if I have time, such as how after a player correctly guesses a sequence, then there's a couple seconds for them to catch their breath before the next sequence begins. Or manipulating the delay so that as the sequences progresses, it plays the sequence faster to make it more difficult.